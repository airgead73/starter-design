{"version":3,"file":"bundle.js","sources":["modules/menu.js","modules/utils.js","modules/handleResponse.js","modules/fetch.js","modules/formValidation.js","modules/forms.js","main.js"],"sourcesContent":["const initMenu = () => {\n\n  const menuBtn = document.getElementById('menuBtn');\n  const menuIcon = document.getElementById('menuIcon');\n  const nav = document.querySelector('[role=\"navigation\"]');\n\n\n  const toggleNav = () => {\n\n    nav.classList.toggle('open');\n\n  }\n\n  const toggleBtn = ($isOpen) => {   \n\n    if($isOpen) {\n      menuBtn.setAttribute('aria-expanded', 'false');\n      menuIcon.classList.remove('fa-xmark');\n      menuIcon.classList.add('fa-bars');\n    } else {\n      menuBtn.setAttribute('aria-expanded', 'true');\n      menuIcon.classList.remove('fa-bars');\n      menuIcon.classList.add('fa-xmark');\n    }\n\n  }\n\n  const toggle = ($isOpen) => {\n\n    if(typeof $isOpen !== \"boolean\") return console.error('Button attribute type is incorrect.');\n    \n\n    toggleBtn($isOpen);\n    toggleNav();\n\n  }\n\n  menuBtn.addEventListener('click', function(e) {\n    const isOpen = menuBtn.getAttribute('aria-expanded') === \"true\" ? true : false;\n    toggle(isOpen);\n  })\n  \n}\n\nexport default initMenu;","const getAttrs = ($element) => {\n\n  const attrs = new Object;\n  const attrNames = $element.getAttributeNames();\n\n  attrNames.forEach(name => {\n    attrs[name] = $element.getAttribute(name);\n  });\n\n return attrs;\n\n}\n\nexport {\n  getAttrs\n}","const handleError = () => {\n\n  function redirectTo404() {\n    document.location.href = '/error'\n  }\n\n  redirectTo404();\n\n}\n\nconst handleSuccess = ($message) => {\n\n  const successControl = document.getElementById('successControl');\n  const successMessage = successControl.querySelector('.success__message');\n  const successDismiss = successControl.querySelector('.success__dismiss');\n\n  successDismiss.addEventListener('click', function() {\n    successControl.classList.remove('show');\n    successMessage.textContent = ' ';    \n  })\n\n  successMessage.textContent = $message;\n  successControl.classList.add('show');\n\n  console.log($message);\n\n}\n\nconst handleBadRequest = ($errors) => {\n  $errors.forEach($error => {\n    const errorField = document.getElementById($error.param);\n    errorField.setAttribute('aria-invalid', 'true');\n  });\n}\n\nexport {\n  handleError,\n  handleBadRequest,\n  handleSuccess\n}","import { getAttrs } from './utils';\nimport { handleBadRequest, handleSuccess, handleError } from './handleResponse';\n\nconst getBody = ($target) => {\n  let body = new Object;\n  let formElements = Array.from($target.elements);\n  formElements = formElements.filter(element => {\n    if(element.hasAttribute('name')) return element;\n  });\n\n  formElements.forEach(element => {\n    const property = element.getAttribute('name');\n    const value = $target[property].value;\n    body[property] = value;\n  });\n\n  body = JSON.stringify(body);\n\n  return body;\n\n}\n\nconst buildRequest = ($target) => {\n\n  const { action: url, method }= getAttrs($target);\n\n  const options = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    body: getBody($target)\n  }\n\n  const request = new Request(url, options);\n\n  return request;\n\n}\n\nconst apiFetch = async($target) => {\n\n  try {\n\n    const request = buildRequest($target);\n    const response = await fetch(request);\n    const json = await response.json();\n\n    if(!response.ok) {\n      const { errors } = json;\n      return handleBadRequest(errors)\n    } \n\n    $target.reset();\n    handleSuccess(json.message);  \n\n  } catch(error) {\n\n    handleError();\n\n  }\n\n \n\n}\n\nexport default apiFetch;","const validateForm = ($form) => {\n\n  const fieldsArray = Array.from($form.querySelectorAll('.control__field'));\n\n  fieldsArray.forEach(field => {\n\n    field.addEventListener('blur', function(e) {\n      checkField(e.target);\n    });\n\n    checkField(field);\n\n  });\n\n  return checkAllFields($form);\n\n}\n\nconst checkAllFields = ($form) => {\n  const invalidFields = Array.from($form.querySelectorAll('.control__field[aria-invalid]'));\n\n  if(invalidFields.length) {  \n    return false;   \n  } else {\n    return true;    \n  }  \n\n}\n\nconst checkField = ($field) => {\n\n  const isRequired = $field.hasAttribute('required');\n  const fieldValue = $field.value;\n  if (isRequired && !fieldValue.length) {\n    $field.setAttribute('aria-invalid', 'true');\n  } else {\n    $field.removeAttribute('aria-invalid');\n  } \n\n}\n\nexport {\n  validateForm\n};","import apiFetch from './fetch';\nimport { validateForm } from './formValidation';\n\nconst initForms = ($formsArr) => {\n\n  $formsArr.forEach($form => {\n    $form.addEventListener('submit', function(e) {\n      e.preventDefault();\n\n      const isValid = validateForm(e.target);\n\n      if(isValid) return apiFetch(e.target);\n\n      return;\n\n    });\n  });\n  \n}\n\nexport default initForms;","import { initMenu } from './modules/index';\nimport { initForms } from './modules/index';\n\nconst forms = Array.from(document.querySelectorAll('.form'));\n\ninitMenu();\nif(forms) initForms(forms);"],"names":[],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}